<2024-01-30>
figure : 애매할 때 주로 씀. header, footer와 같이 명확하지 않을 때

버튼 : 꼭 반드시 한가지 방법만으로 생성하는 것은 x
  => input || button
  => input:submit (이게 정석)
  => button (요즘엔 이렇게 많이 씀) 
  => div > a
  : 목적과 의도에 따라 다름 (클릭 => 행동 => 특정 페이지로 이동)

*grid / scss
  고급 수준의 css를 다룰 수록 함수 & 변수 & 연산자 & 제어자
  ex) calc() / object-fit : cover

object-fit : cover
*영상과 같은 멀티미디어 소스의 사용목적 : 특정 배경을 커버하고 싶은 목적!!
*불일치 : 내가 가지고 있는 영상소스의 w / h != 커버하고자 하는 배경 영역의 w / h 


translate : 시간제약
animation
transform : 시간x

@keyframes 애니메이션 이름

html, css 핵심 : 레이아웃정렬
inline / block
w / h
position / 

float : 이 문법은 매우 불편 ==> flex ==> grid
  >flex 레이아웃 시스템을 적용하려면, 부모
  >grid 레이아웃 시스템을 적용하려면, 부모

display: grid;
grid-template-columns: auto auto;
grid-template-columns: 1fr 1fr ;
  (fr = fraction = 파편/분자)
grid-template-columns: auto auto auto;
grid-template-rows: 100px 300px;

축약 : font / background / animation / transtion / flex / flex-flow
         grid : 열 grid-template-columns/ 행 grid-template-rows 순서로 옴

flex 아이템 간격 : gap
grid 아이템 간격 : grid-column-gap: 30px;
                            grid-row-gap: 30px;